representacion SimCity:

    simCity src estr donde:
        estr ≡ Tupla< 
            antiguedad: Nat,
            turno: Nat, 
            popularidad: Nat,       
            mapa: Mapa,
            construcciones: lista(puntero(agregado)),
            uniones: lista(hijo)
        >
        hijo ≡ tupla<
            sc: puntero(estr),
            turnoUnido: nat  
        >
        agregado ≡ diccLineal(pos, Construccion)
        Pos ≡ tupla<x: Nat, y: Nat>


        

    invariante:
        rep: ^estr ➝ boolean
        (∀ e: ^estr)
        rep(e) ≡
            (∀ h: hijo)(esta?(h, e.uniones) ⟹L
                h.simCity ≠ null ∧L rep(*(h.simCity)) ∧L // la representación del hijo es válida
                e.turno ≥ h.turnoUnido ∧  // el turno es >= al turno agregado 
                (∀ h2: hijo)(esta?(h2, e.uniones) ∧L pos(h2, e.uniones) > pos(h, e.uniones) ⟹L
                    h2.turnoUnido ≤ h.turnoUnido // las uniones van de más antiguas a más recientes
                )
            ) ∧
            (∀p: puntero(agregado))(esta?(p, e.construcciones) ⟹L
                (∄p': puntero(agregado))(esta?(p', e.construcciones) ∧L pos(p, e.construcciones) ≠ pos(p', e.construcciones) ∧L
                    claves(*(p)) ⋂ claves(*(p')) ≠ ∅ // no hay posiciones repetidas en el mismo nivel
                )
            ) ∧
            long(e.construcciones) = e.turnos ∧L // se agregó al menos una consrucción cada turno hasta el actual dentro de este sc
            &e ∉ conjUnidos ∧L // la estructura no loopea consigo misma 
            (∀ p: puntero(^estr))(p ∈ conjUnidos ⟹L
                e.antiguedad ≥ (*p).antiguedad // la antiguedad es mayor o igual a la antiguedad de  cualquier simCity hijo
            ) ∧
            e.popularidad = #(conjUnidos) ∧L // la popularidad es igual a la cantidad de uniones
            (∀p: pos)(pos ∈ conjCasas ⟹L
                nivel(e, pos) < e.antiguedad  ∧ // la antiguedad es mas grande que el nivel de cualquier casa
                ¬esRio(pos, conjMapas) // ninguna casa esta sobre un río 
            ) ∧
            (∀p: pos)(pos ∈ conjComercios ⟹L
                nivel(e, pos) ≤ e.antiguedad  ∧ // la antiguedad es mas grande que el nivel base de cualquier comercio
                ¬esRio(pos, conjMapas) // ningun comercio está sobre un río 
            ) ∧
            (∃p: Pos)(pos ∈ conjComercios) ∨ pos ∈ conjCasas) ∧L nivel(e, pos) = e.antiguedad) ∧ // existe almenos una casa o comercio de nivel máximo
            unionesValidas(e, e.uniones)
            // no se solapan posiciones maximas entre la estructura hasta el hijo 'x' y ese hijo, para todo hijo
            // descontando las casas y comercios agregados despues de la union  

            donde:
                conjUnidos ≡ unirPunteros(e.uniones)
                conjCasas ≡ unirCasas(ag(&e, conjUnidos)) 
                conjComercios ≡ unirComercios(ag(&e, conjUnidos))
                conjMapas  ≡ unirMapas(ag(&e, conjUnidos))

        unirPunteros: secu(hijo) ➝ conj(puntero(^estr))
        unirPunteros(s) ≡ _unirPunteros(s, ∅)

        _unirPunteros: secu(hijo) × conj(puntero(^estr)) ➝ conj(puntero(^estr))
        _unirPunteros(sh, ps) ≡ 
            if vacia?(sh) then                 
                ps
            else if prim(sh).simCity = null ∨L prim(sh).sc ∈ ps /* loop! */ then 
                _unirPunteros(fin(sh), ps)
            else 
                _unirPunteros(prim(sh).sc->uniones, Ag(prim(sh).sc, ps)) ⋃ 
                    _unirPunteros(fin(sh), Ag(prim(sh).sc, ps)) // ag se encarga de posibles duplicados en la union
            fi

        unirMapas: conj(puntero(^estr)) ➝ Mapa
        unirMapas(ps) ≡ if vacio?(ps) then crear(∅, ∅) else dameUno(ps)->mapa + UnirMapas(sinUno(ps)) fi

        unirCasas: estr × conj(puntero(^estr)) ➝ Dicc(Pos, TurnoAgregado)
        unirCasas(e, ps) ≡ if vacio?(ps) then vacio else it(dameUno(ps)->construcciones, "casa") ⋃ unirCasas(sinUno(ps)) fi

        unirComercios: estr × conj(puntero(^estr)) ➝ Dicc(Pos, TurnoAgregado)
        unirComercios(e, ps) ≡ if vacio?(ps) then vacio else it(dameUno(ps)->construcciones, "comercio") ⋃ unirComercios(sinUno(ps)) fi

        it: secu(puntero(agregado)) × Construccion ➝ dicc(Pos, TurnoAgregado)
        it(s, c) ≡ _it(s, c, 0)

        _it: secu(puntero(agregado)) × Construccion × Nat n ➝ dicc(Pos, TurnoAgregado)
        _it(s, c, n) ≡ if vacia?(s) then vacio else filtrar(*(prim(s)), c, n) ⋃ it(fin(s), c, n + 1) fi 

        filtrar: dicc(Pos, Construccion) × Construccion × Nat ➝ dicc(Pos, TurnoAgregado)
        filtrar(d, c, n) ≡ 
            if vacio?(d) then 
                ∅ 
            else if obtener(clave, d) = c then 
                definir(clave, n, filtrar(borrar(clave, d)))
            else 
                filtrar(borrar(clave, d))
            fi
            donde clave ≡ dameUno(claves(d))

        //remover: secu(α) × α ➝ secu(α) // remueve la primera aparicion
        //remover(s, a) ≡ if vacia?(s) then <> else if a = prim(s) then fin(s) else prim(s) • remover(fin(s), a) fi
        
        unionesValidas: ^estr × secu(hijo) ➝ bool
        unionesValidas(e, s) ≡ vacio?(s) ∨L (maxcons(e, izq) ⋂ maxcons(e, der) = ∅ ∧ unionesValidas(e, com(s)))
            donde:
                com ≡ unirPunteros(com(e.uniones))
                ult ≡ ult(e.uniones) • <>
                casascom ≡ unirCasas(com) // obs: no puede haber cons maximas creadas despues de la union  
                comercom ≡ unirComercios(com)
                casasult ≡ unirCasas(ult)
                comerult ≡ unirComercios(ult)
                izq ≡ casascom ⋃ comercom
                der ≡ casasult ⋃ comerult


        maxcons: ^estr × conj(Pos) ➝ conj(Pos)
        maxcons(e, c) ≡ _maxcons(e, c, ∅, 0)

        _maxcons: ^estr × conj(Pos) × conj(Pos) × Nat ➝ conj(Pos)
        _maxcons(e, c, max, n) ≡
            if vacio?(c) then  
                max
            else if nivel_i > n then 
                _maxcons(e, sinUno(c), Ag(pos_i, ∅), nivel_i)
            else if nivel_i = n then 
                _maxcons(e, sinUno(c), Ag(pos_i, max), n)
            else
                _maxcons(e, sinUno(c), max, n)
            fi 
            donde:
                pos_i ≡ dameUno(c)
                nivel_i ≡ nivel(e, pos_i)

        nivel: estr × pos ➝ Nat
        nivel(e, pos) ≡
            if pos ∈ conjCasas then
                nivelesPorUnion(e, pos)
            else 
                maximo(nivelesPorUnion(e, pos) • significados(manhattan(pos, 3), conjCasas))
            fi

        nivelesPorUnion: ^estr × pos ➝ Nat
        nivelesPorUnion(e, pos) ≡ 
            if def?(pos, Construcciones) then // ∨ def?(pos, e.comercios) then
                e.turno - obtener(pos, Construcciones)
            else 
                e.turno - hijoCorrecto.turnoUnion + nivelesPorUnion(hijoCorrecto.sc, pos)
            fi  
            donde:
                Construcciones ≡ it(e.construcciones, "casa") ⋃ it(e.construcciones, "comercio")
                hijoCorrecto ≡ llegarAlHijoCorrecto(e.uniones, pos)

        ...


    abstraccion:
        abs: ^estr e ➝ SimCity {rep(e)}
        (∀ e: ^estr)
        abs(e) ≡ sc: SimCity |
            mapa(sc) =ob conjMapas ∧
            casas(sc) =obs nivelar(conjCasas) ∧
            comercios(sc) =obs nivelar(conjComercios) ∧
            popularidad(sc) =obs e.popularidad

            donde:
                conjUnidos ≡ unirPunteros(e.uniones)
                conjCasas ≡ unirCasas(ag(&e, conjUnidos)) 
                conjComercios ≡ unirComercios(ag(&e, conjUnidos))
                conjMapas  ≡ unirMapas(ag(&e, conjUnidos))

        nivelar: ^estr × dicc(Pos, Nat) ➝ dicc(Pos, Nat)
        nivelar(d) ≡ if vacio?(d) then vacio else definir(clave, nivel(e, clave), nivelar(e, borrar(clave, d))) fi     
        donde:
            clave ≡ dameUno(claves(d))

fin representacion
