-------------------------------------------
bbb{iniciar}(in m: Mapa) ⟶ res : res
1:  res.turno ← 0
2:  res.antiguedad ← 0
3:  res.popularidad ← 0
4:  res.mapa ← m
5:  res.construcciones ← vacio()
6:  res.uniones ← vacia()
7:  return res
Complejidad: O(1)
-------------------------------------------

-------------------------------------------
bbb{avanzarTurno}(inout SimCity s,  inout dicc(Pos, Construccion) cs)
1:  s.turno ← s.turno + 1 
2:  s.antiguedad ← s.antiguedad + 1 
3:  s.construcciones.agregarAtras(direccion(cs))
Complejidad: O(1)
-------------------------------------------

----------------------------------------
bbb{unir}(inout SimCity s1,  inout Simcity s2)
1:  s1.popularidad ← s1.popularidad + s2.popularidad + 1
2:  s1.antiguedad ← max(s1.antiguedad, s2.antiguedad)
3:  hijo nuevoHijo ← <direccion(s2), s1.turno>
4:  agregarAtras(s1.uniones, nuevoHijo)
Complejidad: O(1)
----------------------------------------

Asumo que existe un conjunto U ≡ {u₁, u₂, ... , uₙ}
tal que cada uno de esos uᵢ son los simcities que componen al simcity original
llamamos nodos : #U
llamamos sumConstrucciones : ⅀_{i=1}^{nodos}(copiar(uᵢ.construcciones))
llamamos sumMapas : ⅀_{i=1}^{nodos}(uᵢ.mapa)

---------------------------------------------
bbb{mapa}(in SimCity s) ➝ res : Mapa 
1:  Mapa res ← s.mapa
2:  for(nat i ← 0; i < long(s.uniones); i ← i + 1) : 
3:      res ← res + bbb{mapa}(*s.uniones[i].sc)
4:  return res
Complejidad: O(sumMapas) 
cabe aclarar que la suma de los mapas esta definida
---------------------------------------------

-----------------------------------------
bbb{listDeTipo}(in SimCity s, in construccion tipo) ➝ res : dicc(Pos, Nivel)
1:  dicc(pos, nivel) res ← vacio()
2:  for(nat i ← 0; i < long(s.construcciones); i ← i + 1) : 
3:      itDicc(Pos, Construccion) itCs ← crearIt(*s.construcciones[i]);
4:      while(haySiguiente(itCs)) :
5:          Pos p ← siguienteClave(itCs)
6:          construccion c ← siguienteSignificado(itCs)
7:          if(c == tipo) :
8:              definirRapido(res, p, s.turno - (i+1))
9:          avanzar(itCs) 
Complejidad: O(⅀_{i = 0}^{long(s.construcciones)}(#claves(*s.construcciones[i])))
-------------------------------------------

-----------------------------------------
bbb{casas}(in SimCity s) ➝ res : dicc(Pos, Nivel)
1:  dicc(pos, nivel) res ← copiar(listDeTipo(s, "casa"))
2:  dicc(pos, nivel) comerciosTotales ← copiar(listDeTipo(s, "comercio"))
3:  for(nat i ← 0; i < long(s.uniones); i ← i + 1) : 
4:      itDicc(Pos, Nivel) itCs ← crearIt(bbb{casas}(*s.uniones[i].sc))
5:      while(haySiguiente(itCs)) :
6:          Pos p ← siguienteClave(itCs)
7:          Nivel n ← siguienteSignificado(itCs)
8:          if(¬def?(res, p) ∧ ¬def?(comerciosTotales, p)) :
9:              definirRapido(res, p, s.turno - s.uniones[i].turnoUnido + n)
10:         avanzar(itCs)
11:     comerciosTotales ← comerciosTotales ⋃ listDeTipo(*s.uniones[i].sc, "comercio")
12: return res
Complejidad: O(sumConstrucciones² + nodos)
-------------------------------------------

-------------------------------------------
bbb{comercios}(in SimCity s) ➝ res : dicc(Pos, Nivel)
1:  dicc(Pos, Nivel) casasTotales ← casas(s)
2:  dicc(Pos, Nivel) comerciosTotales ← comerciosAux(s, casasTotales)
2:  return manhatizar(comerciosTotales, casasTotales)
Complejidad: O(manhatizar(comerciosAux(s, casasTotales), casasTotales) + casas(s))

bbb{comerciosAux}(inout SimCity s, inout casasTotales) ➝ res : dicc(Pos, Nivel)
1:  dicc(pos, nivel) res ← copiar(listDeTipo(s, "comercio"))
3:  for(nat i ← 0; i < long(s.uniones); i ← i + 1) : 
4:      itDicc(Pos, Nivel) itCs ← crearIt(bbb{comerciosAux}(*s.uniones[i].sc), casasTotales)
5:      while(haySiguiente(itCs)) :
6:          Pos p ← siguienteClave(itCs)
7:          Nivel n ← siguienteSignificado(itCs)
8:          if(¬def?(res, p) ∧ ¬def?(casasTotales, p)) :
9:              definirRapido(res, p, s.turno - s.uniones[i].turnoUnido + n)
10:         avanzar(itCs)
11: return res
Complejidad: O(sumConstrucciones² + nodos)

bbb{manhatizar}(inout dicc(Pos, Nivel) comercios, inout dicc(Pos, Nivel) casasTotales) 
1:  itDicc(Pos, Nivel) itCs ← crearIt(comercios)
2:  while(haySiguiente(itCs)) :
3:      Pos p ← copia(siguienteClave(itCs))
4:      Nivel n ← copia(siguienteSignificado(itCs))
5:      eliminarSiguiente(itCs)
6:      definirRapido(comercios, p, max(n, nivelCom(p, casasTotales)))
Complejidad: O(#claves(comercios) * #claves(casasTotales))
-------------------------------------------

-------------------------------------------
bbb{nivelCom}(in Pos p, inout dicc(pos, Nivel) cs) ➝ Nat
1:  nat maxLvl ← 1
2:  for(int i = -3; i <= 3; ++i) :
3:      for(int j = |i|-3; j <= 3-|i|; ++j) :
4:          if(p.x + i >= 0 ∧ p.y + j >= 0) :
5:              Pos p2 ← <p.x+i, p.y+j> 
6:              if(def?(cs, p2)) :
7:                  maxLvl = max(maxLvl, obtener(cs, p2))
8:  return maxLvl
Complejidad: O(#claves(cs))
-------------------------------------------

-------------------------------------------
bbb{popularidad}(inout SimCity s) ➝ res : Nat
1:  return s.popularidad
Complejidad: O(1)
-------------------------------------------

-------------------------------------------
bbb{turnos}(inout SimCity s) ➝ res : Nat
1:  return s.antiguedad
Complejidad: O(1)
-------------------------------------------

-------------------------------------------
• ⋃ •(inout dicc(α, β) d1, inout dicc(α, β) d2) ➝ res : dicc(α, β)
1:  dicc(α, β) res = copiar(d1)
2:  itDicc(α, β) itCs ← crearIt(d2);
3:  while(haySiguiente(itCs)) :
4:      α a ← siguienteClave(itCs)
5:      β b ← siguienteSignificado(itCs)
6:      if(¬def?(res, a)) :
7:          definirRapido(res, a, b)
8:      avanzar(itCs)
9:  return res
Complejidad: O(copy(d1) + #claves(d2))
-------------------------------------------
